diff --git a/node_modules/node-media-server/src/node_http_server.js b/node_modules/node-media-server/src/node_http_server.js
index 6837e3f..3d9c425 100644
--- a/node_modules/node-media-server/src/node_http_server.js
+++ b/node_modules/node-media-server/src/node_http_server.js
@@ -35,14 +35,6 @@ class NodeHttpServer {
 
     app.use(bodyParser.urlencoded({ extended: true }));
 
-    app.all('*', (req, res, next) => {
-      res.header('Access-Control-Allow-Origin', this.config.http.allow_origin);
-      res.header('Access-Control-Allow-Headers', 'Content-Type,Content-Length, Authorization, Accept,X-Requested-With');
-      res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS');
-      res.header('Access-Control-Allow-Credentials', true);
-      req.method === 'OPTIONS' ? res.sendStatus(200) : next();
-    });
-
     app.get('*.flv', (req, res, next) => {
       req.nmsConnectionType = 'http';
       this.onConnect(req, res);
diff --git a/node_modules/node-media-server/src/node_rtmp_session.js b/node_modules/node-media-server/src/node_rtmp_session.js
index aad61e8..9b9dcd6 100644
--- a/node_modules/node-media-server/src/node_rtmp_session.js
+++ b/node_modules/node-media-server/src/node_rtmp_session.js
@@ -14,6 +14,7 @@ const NodeCoreUtils = require('./node_core_utils');
 const NodeFlvSession = require('./node_flv_session');
 const context = require('./node_core_ctx');
 const Logger = require('./node_core_logger');
+const EventEmitter = require('events');
 
 const N_CHUNK_STREAM = 8;
 const RTMP_VERSION = 3;
@@ -1045,14 +1046,16 @@ class NodeRtmpSession {
     this.respondCreateStream(invokeMessage.transId);
   }
 
-  onPublish(invokeMessage) {
+  async onPublish(invokeMessage) {
     if (typeof invokeMessage.streamName !== 'string') {
       return;
     }
     this.publishStreamPath = '/' + this.appname + '/' + invokeMessage.streamName.split('?')[0];
     this.publishArgs = QueryString.parse(invokeMessage.streamName.split('?')[1]);
     this.publishStreamId = this.parserPacket.header.stream_id;
-    context.nodeEvent.emit('prePublish', this.id, this.publishStreamPath, this.publishArgs);
+    const waiter = new EventEmitter();
+    context.nodeEvent.emit('prePublish', this.id, this.publishStreamPath, this.publishArgs, () => waiter.emit('done'));
+    await new Promise(resolve => waiter.once('done', resolve));
     if (!this.isStarting) {
       return;
     }
